# -*- coding: utf-8 -*-
"""Chào mừng bạn đến với Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

# !pip install -q pandas scikit-learn imbalanced-learn

# !curl -L -o students-adaptability-level-in-online-education.zip https://www.kaggle.com/api/v1/datasets/download/mdmahmudulhasansuzan/students-adaptability-level-in-online-education
# !unzip -o students-adaptability-level-in-online-education.zip

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LogisticRegression
from sklearn.svm import LinearSVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report
from imblearn.over_sampling import SMOTE
import joblib
from google.colab import files
import os

file_path = 'students_adaptability_level_online_education.csv'
try:
    df = pd.read_csv(file_path)
    print("Đã đọc file dữ liệu thành công.")
except Exception as e:
    print(f"Lỗi khi đọc file dữ liệu: {str(e)}")

print("Kích thước DataFrame gốc:", df.shape)
print("Dữ liệu mẫu (5 hàng đầu):\n", df.head())

df.fillna('', inplace=True)
df.columns = df.columns.str.strip()

df['van_ban_tong_hop'] = (
    "Tuổi: " + df['Age'].astype(str) + " " +
    "Giới tính: " + df['Gender'] + " " +
    "Trình độ: " + df['Education Level'] + " " +
    "Cơ sở: " + df['Institution Type'] + " " +
    "Sinh viên CNTT: " + df['IT Student'] + " " +
    "Vị trí: " + df['Location'] + " " +
    "Tình trạng điện: " + df['Load-shedding'] + " " +
    "Tình trạng tài chính: " + df['Financial Condition'] + " " +
    "Loại internet: " + df['Internet Type'] + " " +
    "Loại mạng: " + df['Network Type'] + " " +
    "Thời lượng lớp: " + df['Class Duration'].astype(str) + " " +
    "Hệ thống tự học: " + df['Self Lms'] + " " +
    "Thiết bị: " + df['Device']
)

X_text = df['van_ban_tong_hop']
y = df['Adaptivity Level']

df_to_web = df[['van_ban_tong_hop', 'Adaptivity Level']].copy()
print("Kích thước df_to_web:", df_to_web.shape)
print("Dữ liệu mẫu trong df_to_web (5 hàng đầu):\n", df_to_web.head())

try:
    df_to_web.to_csv('data_for_web.csv', index=False)
    if os.path.exists('data_for_web.csv'):
        print("Đã lưu file 'data_for_web.csv' thành công.")
    else:
        print("Lỗi: File 'data_for_web.csv' không được tạo sau khi lưu.")
except Exception as e:
    print(f"Lỗi khi lưu 'data_for_web.csv': {str(e)}")

le = LabelEncoder()
y_encoded = le.fit_transform(y)

tfidf = TfidfVectorizer(max_features=10000, lowercase=True)
X = tfidf.fit_transform(X_text)

X_temp, X_test, y_temp, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)
X_train, X_val, y_train, y_val = train_test_split(X_temp, y_temp, test_size=0.25, random_state=42)

smote = SMOTE(random_state=42)
X_train, y_train = smote.fit_resample(X_train, y_train)

param_grid_lr = {'C': [0.01, 0.1, 1, 10, 100, 1000]}
grid_lr = GridSearchCV(LogisticRegression(max_iter=1000), param_grid_lr, cv=10, scoring='f1_macro')
grid_lr.fit(X_train, y_train)
print("Tham số tốt nhất cho Logistic Regression:", grid_lr.best_params_)

param_grid_svc = {'C': [0.01, 0.1, 1, 10, 100, 1000]}
grid_svc = GridSearchCV(LinearSVC(max_iter=1000), param_grid_svc, cv=10, scoring='f1_macro')
grid_svc.fit(X_train, y_train)
print("Tham số tốt nhất cho LinearSVC:", grid_svc.best_params_)

param_grid_rf = {'n_estimators': [50, 100, 200], 'max_depth': [10, 20, None]}
grid_rf = GridSearchCV(RandomForestClassifier(random_state=42), param_grid_rf, cv=10, scoring='f1_macro')
grid_rf.fit(X_train, y_train)
print("Tham số tốt nhất cho Random Forest:", grid_rf.best_params_)

best_model_lr = grid_lr.best_estimator_
best_model_svc = grid_svc.best_estimator_
best_model_rf = grid_rf.best_estimator_

y_val_pred_lr = best_model_lr.predict(X_val)
y_test_pred_lr = best_model_lr.predict(X_test)
print("Báo cáo đánh giá Logistic Regression trên tập validation:\n")
print(classification_report(le.inverse_transform(y_val), le.inverse_transform(y_val_pred_lr), zero_division=0))
print("Báo cáo đánh giá Logistic Regression trên tập test:\n")
print(classification_report(le.inverse_transform(y_test), le.inverse_transform(y_test_pred_lr), zero_division=0))

y_val_pred_svc = best_model_svc.predict(X_val)
y_test_pred_svc = best_model_svc.predict(X_test)
print("\nBáo cáo đánh giá LinearSVC trên tập validation:\n")
print(classification_report(le.inverse_transform(y_val), le.inverse_transform(y_val_pred_svc), zero_division=0))
print("Báo cáo đánh giá LinearSVC trên tập test:\n")
print(classification_report(le.inverse_transform(y_test), le.inverse_transform(y_test_pred_svc), zero_division=0))

y_val_pred_rf = best_model_rf.predict(X_val)
y_test_pred_rf = best_model_rf.predict(X_test)
print("\nBáo cáo đánh giá Random Forest trên tập validation:\n")
print(classification_report(le.inverse_transform(y_val), le.inverse_transform(y_val_pred_rf), zero_division=0))
print("Báo cáo đánh giá Random Forest trên tập test:\n")
print(classification_report(le.inverse_transform(y_test), le.inverse_transform(y_test_pred_rf), zero_division=0))

f1_lr = classification_report(le.inverse_transform(y_test), le.inverse_transform(y_test_pred_lr), output_dict=True, zero_division=0)['macro avg']['f1-score']
f1_svc = classification_report(le.inverse_transform(y_test), le.inverse_transform(y_test_pred_svc), output_dict=True, zero_division=0)['macro avg']['f1-score']
f1_rf = classification_report(le.inverse_transform(y_test), le.inverse_transform(y_test_pred_rf), output_dict=True, zero_division=0)['macro avg']['f1-score']
f1_scores = {'Logistic Regression': f1_lr, 'LinearSVC': f1_svc, 'Random Forest': f1_rf}
best_model_name = max(f1_scores, key=f1_scores.get)
best_model = best_model_lr if best_model_name == 'Logistic Regression' else best_model_svc if best_model_name == 'LinearSVC' else best_model_rf
print(f"\nMô hình tốt nhất: {best_model_name} với F1-score: {f1_scores[best_model_name]:.2f}")

try:
    joblib.dump(best_model, 'best_model.pkl')
    if os.path.exists('best_model.pkl'):
        print("Đã lưu file 'best_model.pkl' thành công.")
    else:
        print("Lỗi: File 'best_model.pkl' không được tạo sau khi lưu.")
except Exception as e:
    print(f"Lỗi khi lưu 'best_model.pkl': {str(e)}")

try:
    joblib.dump(tfidf, 'tfidf_vectorizer.pkl')
    if os.path.exists('tfidf_vectorizer.pkl'):
        print("Đã lưu file 'tfidf_vectorizer.pkl' thành công.")
    else:
        print("Lỗi: File 'tfidf_vectorizer.pkl' không được tạo sau khi lưu.")
except Exception as e:
    print(f"Lỗi khi lưu 'tfidf_vectorizer.pkl': {str(e)}")

try:
    joblib.dump(le, 'label_encoder.pkl')
    if os.path.exists('label_encoder.pkl'):
        print("Đã lưu file 'label_encoder.pkl' thành công.")
    else:
        print("Lỗi: File 'label_encoder.pkl' không được tạo sau khi lưu.")
except Exception as e:
    print(f"Lỗi khi lưu 'label_encoder.pkl': {str(e)}")

files_to_download = ['data_for_web.csv', 'best_model.pkl', 'tfidf_vectorizer.pkl', 'label_encoder.pkl']
for file_name in files_to_download:
    if os.path.exists(file_name):
        try:
            files.download(file_name)
            print(f"Đã tải file '{file_name}' về máy tính thành công.")
        except Exception as e:
            print(f"Lỗi khi tải file '{file_name}': {str(e)}")
    else:
        print(f"Không tìm thấy file '{file_name}', kiểm tra lại quá trình lưu!")